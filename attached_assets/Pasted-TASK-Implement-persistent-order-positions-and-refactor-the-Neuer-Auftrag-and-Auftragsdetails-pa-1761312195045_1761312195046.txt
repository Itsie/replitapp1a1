TASK: Implement persistent order positions and refactor the "Neuer Auftrag" and "Auftragsdetails" pages to a two-column layout with a full-width positions panel and totals. You ARE allowed to add Prisma schema and the endpoints listed below.

1) PRISMA SCHEMA (add model + order totals)
- Add model:
  model OrderPosition {
    id            String   @id @default(cuid())
    orderId       String
    order         Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)

    articleName   String
    articleNumber String?
    qty           Decimal  @db.Decimal(10,2)
    unit          String   @default("Stk")
    unitPriceNet  Decimal  @db.Decimal(10,2)
    vatRate       Int      @default(19)    // 0 | 7 | 19

    lineNet       Decimal  @db.Decimal(12,2)
    lineVat       Decimal  @db.Decimal(12,2)
    lineGross     Decimal  @db.Decimal(12,2)

    procurement   String   @default("NONE") // NONE | ORDER_NEEDED | ORDERED | RECEIVED
    supplierNote  String?

    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
  }

- Extend Order:
  totalNet   Decimal? @db.Decimal(12,2)
  totalVat   Decimal? @db.Decimal(12,2)
  totalGross Decimal? @db.Decimal(12,2)

- Run migration:
  npx prisma migrate dev -n "add_order_positions_and_totals"
  npx prisma generate

2) SERVER (Express) – new routes under /api/orders/:id/positions
Rules: compute line totals server-side; after any change, recalc Order.total* in a transaction.

- GET    /api/orders/:id/positions
- POST   /api/orders/:id/positions         // accepts ONE object or an ARRAY
- PATCH  /api/orders/:id/positions/:posId  // partial update: articleNumber, articleName, qty, unit, unitPriceNet, vatRate, procurement, supplierNote
- DELETE /api/orders/:id/positions/:posId

Validation:
- articleName required; qty > 0; unitPriceNet ≥ 0; vatRate ∈ {0,7,19}
- lineNet  = round2(qty * unitPriceNet)
- lineVat  = round2(lineNet * vatRate/100)
- lineGross = lineNet + lineVat

After create/update/delete:
- Recalculate totals = sum of all positions for that order; persist on Order.

Keep all existing endpoints intact. Do not touch jtl_order_positions.

3) UI – TWO-COLUMN LAYOUT + POSITIONS PANEL

A) Neuer Auftrag (/orders/new)
- Header: Breadcrumb "Zurück", H1 "Neuer Auftrag".
- Grid container: max-w-[1600px] 2xl:max-w-[1920px] mx-auto px-6 py-4.
- Grid lg:grid-cols-12 gap-4
  Left  (lg:col-span-8): Cards "Kunde", "Rechnungsadresse", optional "Lieferadresse"
  Right (lg:col-span-4): Card "Auftragsdaten" (title, customerName, department, dueDate, location, notes)

- Full width (lg:col-span-12): Card "Positionen"
  • Toolbar: [+ Position hinzufügen] | [Mehr] (CSV Import/Export)
  • Editable TanStack Table columns:
      Art.-Nr. | Artikelname* | Menge | Einheit | Einzelpreis Netto | MwSt % | Netto | MwSt | Brutto | Beschaffung | Notiz | (Löschen)
    - Netto/MwSt/Brutto read-only (from client calc while editing).
    - MwSt select: 0 / 7 / 19
  • Totals box (right bottom in card footer): Netto / MwSt / Brutto (DE-Format).
  • Client state while editing; on submit persist to DB:
     1) POST /api/orders
     2) POST /api/orders/:id/positions with the current array
     3) On success → toast, redirect to /orders/:id

- Sticky footer actions (bottom): [Abbrechen] | [Auftrag erstellen]
  Disable "Auftrag erstellen" if required fields invalid OR positions.length === 0.

B) Auftragsdetails (/orders/:id)
- Header: Title = order.title; meta line unter Title: displayOrderNumber • department badge • workflow badge; right button: [Für Produktion freigeben] (confirm; disabled if positions.length===0 OR required print assets missing; tooltip explains).
- Grid same as above.
  Left cards: "Kunde", "Rechnungsadresse", optional "Lieferadresse".
  Right cards: "Auftrag" (Abteilung, Quelle, Workflow, Fälligkeitsdatum, Standort, Erstellt am), "Anhänge" (required/optional count + Button "Druckdaten öffnen").
- Full width card "Positionen" (editierbar, server-backed):
  • Load via GET /api/orders/:id/positions.
  • Inline Add → POST; Edit cell → PATCH; Delete → DELETE.
  • Totals box zeigt order.totalGross etc.; on change, refetch or optimistic update.

C) Orders overview (/orders)
- Add/update columns:
  Auftragsnr. (displayOrderNumber) | Titel | Kunde | Abteilung | Quelle | Status | Fälligkeit (mit farbigen Chips: overduered/amber/today/green) | Größentabelle ✓/— | Druckdaten (required count) | Beschaffung (computed from positions: offen/bestellt/eingetroffen/—) | Gesamt (Brutto)
- Keep column visibility + width mode persistence (localStorage).
- Keep Table as default; Card view toggle weiterhin optional.

D) Styling polish (apply generally)
- Cards: rounded-2xl, border-muted/60, hover:shadow-sm
- Table density: compact (px-3 py-2), sticky header, overflow-x-auto
- Container width as above; no more skinny center layouts.

E) Acceptance
- Positions persist in DB and are editable on detail page.
- Creating a new order saves both order and its positions; redirect to detail, totals correct.
- "Für Produktion freigeben" disabled until ≥1 Position AND required print assets present.
- Orders overview shows "Gesamt (Brutto)" and due-date colors; procurement indicator works.
- No regressions to existing JTL import, size tables, assets, or auth.

Please implement exactly as specified.
